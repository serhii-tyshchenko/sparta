{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/SearchForm/index.js","components/ParcelList/ParcelListItem/index.js","components/ParcelList/index.js","components/Results/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Footer","SearchForm","state","query","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","submitForm","onSubmit","this","type","name","placeholder","onChange","pattern","title","ParcelListItem","id","parcel","onClick","getParcelStatus","bind","removeParcel","ParcelList","parcels","map","item","key","Results","parcelStatus","number","citySender","cityRecipient","payer","status","App","responseText","getData","axios","post","apiKey","modelName","calledMethod","methodProperties","Documents","DocumentNumber","Phone","formatResponse","response","data","Number","CitySender","CityRecipient","PayerType","Status","searchParcel","includes","alert","then","catch","error","console","log","filter","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAEqBA,G,uLAEjB,OACE,4BAAQC,UAAU,UAChB,wBAAIA,UAAU,gBAAd,4C,GAJ4BC,cCAfC,E,iLAEjB,OAAO,oE,GAFyBD,aCAfE,E,2MACnBC,MAAQ,CACNC,MAAO,I,EAETC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEH,MAAOE,EAAEE,OAAOC,S,EAElCC,aAAe,SAAAJ,GACbA,EAAEK,iBACF,EAAKC,MAAMC,WAAW,EAAKV,MAAMC,OACjC,EAAKG,SAAS,CAAEH,MAAO,M,wEAGvB,OACE,yBAAKL,UAAU,UACb,0BAAMA,UAAU,eAAee,SAAUC,KAAKL,cAC5C,2BACEX,UAAU,gBACVU,MAAOM,KAAKZ,MAAMC,MAClBY,KAAK,OACLC,KAAK,GACLC,YAAY,sBACZC,SAAUJ,KAAKV,aACfe,QAAQ,WACRC,MAAM,eAER,4BAAQtB,UAAU,eAAlB,gB,GA1B8BC,aCAnBsB,E,iLAEjB,IAAMC,EAAKR,KAAKH,MAAMY,OACtB,OACE,wBAAIzB,UAAU,wBACZ,yBACE0B,QAASV,KAAKH,MAAMc,gBAAgBC,KAAKZ,KAAMQ,GAC/CxB,UAAU,iBACVsB,MAAM,8BAELN,KAAKH,MAAMY,QAEd,4BACEC,QAASV,KAAKH,MAAMgB,aAAaD,KAAKZ,KAAMQ,GAC5CF,MAAM,gBACNtB,UAAU,kBAHZ,a,GAZoCC,aCAvB6B,E,iLACT,IAAD,OACP,OACE,yBAAK9B,UAAU,WACb,wBAAIA,UAAU,iBACXgB,KAAKH,MAAMkB,QAAQC,KAAI,SAAAC,GAAI,OAC1B,kBAAC,EAAD,CACER,OAAQQ,EACRC,IAAKD,EACLN,gBAAiB,EAAKd,MAAMc,gBAC5BE,aAAc,EAAKhB,MAAMgB,wB,GAVC5B,aCAnBkC,E,iLACT,IAAD,EAOHnB,KAAKH,MAAMuB,aALbC,EAFK,EAELA,OACAC,EAHK,EAGLA,WACAC,EAJK,EAILA,cACAC,EALK,EAKLA,MACAC,EANK,EAMLA,OAEF,OACE,yBAAKzC,UAAU,WACZgB,KAAKH,MAAMuB,cACV,6BACE,4BAAKC,GACL,6BACGC,EADH,IACgBC,GAEhB,qCAAWC,GACX,sCAAYC,S,GAlBaxC,aCwGtByC,E,2MA/FbtC,MAAQ,CACN2B,QAAS,CAAC,iBAAkB,kBAC5BY,aAAc,I,EAiBhBC,QAAU,SAAAvC,GACR,OAAOwC,IAAMC,KAAK,uCAAwC,CACxDC,OAAQ,GACRC,UAAW,mBACXC,aAAc,qBACdC,iBAAkB,CAChBC,UAAW,CACT,CACEC,eAAgB/C,EAChBgD,MAAO,S,EAMjBC,eAAiB,SAAAC,GACf,IAAMC,EAAOD,EAASC,KAAKA,KAAK,GAChC,MAAO,CACLnB,OAAQmB,EAAKC,OACbnB,WAAYkB,EAAKE,WACjBnB,cAAeiB,EAAKG,cACpBnB,MAAOgB,EAAKI,UACZnB,OAAQe,EAAKK,S,EAIjBC,aAAe,SAAAzD,GACT,EAAKD,MAAM2B,QAAQgC,SAAS1D,GAC9B2D,MAAM,yBAGR,EAAKpB,QAAQvC,GACV4D,MAAK,SAAAV,GACJ,EAAK/C,SAAS,CACZuB,QAAQ,GAAD,mBAAM,EAAK3B,MAAM2B,SAAjB,CAA0B1B,IACjCsC,aAAc,EAAKW,eAAeC,QAGrCW,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,EAGhCtC,aAAe,SAAAL,GACb,EAAKhB,SAAS,CACZuB,QAAQ,YAAK,EAAK3B,MAAM2B,QAAQuC,QAAO,SAAArC,GAAI,OAAIA,IAAST,S,EAI5DG,gBAAkB,SAAAU,GAChB,EAAKO,QAAQP,GACV4B,MAAK,SAAAV,GACJ,EAAK/C,SAAS,CACZmC,aAAc,EAAKW,eAAeC,QAGrCW,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,mFAnE9BI,aAAaC,QAAQ,cACjBxD,KAAKR,SAASiE,KAAKC,MAAMH,aAAaC,QAAQ,gBAC9CxD,KAAKR,SAAS,CAEZmC,aAAc,KAEpB3B,KAAKR,SAAS,CAAEmC,aAAc,O,2CAI9B4B,aAAaI,QAAQ,aAAcF,KAAKG,UAAU5D,KAAKZ,U,+BA6DvD,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,CAAYc,WAAYE,KAAK8C,eAC7B,kBAAC,EAAD,CACEnC,gBAAiBX,KAAKW,gBACtBE,aAAcb,KAAKa,aACnBE,QAASf,KAAKZ,MAAM2B,UAEtB,kBAAC,EAAD,CAASK,aAAcpB,KAAKZ,MAAMuC,gBAEpC,kBAAC,EAAD,W,GA1FU1C,aCEE4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.22361b47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h2 className=\"header__logo\">SPARTA (Simple Parcel Tracking App)</h2>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return <footer>Â© Serhii Tyshchenko, 2019</footer>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class SearchForm extends Component {\r\n  state = {\r\n    query: \"\"\r\n  };\r\n  handleChange = e => {\r\n    this.setState({ query: e.target.value });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.submitForm(this.state.query);\r\n    this.setState({ query: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"search\">\r\n        <form className=\"search__form\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            className=\"search__input\"\r\n            value={this.state.query}\r\n            type=\"text\"\r\n            name=\"\"\r\n            placeholder=\"Enter parcel number\"\r\n            onChange={this.handleChange}\r\n            pattern=\"^\\d{14}\"\r\n            title=\"14 numbers\"\r\n          />\r\n          <button className=\"search__btn\">Search</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ParcelListItem extends Component {\r\n  render() {\r\n    const id = this.props.parcel;\r\n    return (\r\n      <li className=\"parcels__item parcel\">\r\n        <div\r\n          onClick={this.props.getParcelStatus.bind(this, id)}\r\n          className=\"parcel__number\"\r\n          title=\"Click to get parcel status\"\r\n        >\r\n          {this.props.parcel}\r\n        </div>\r\n        <button\r\n          onClick={this.props.removeParcel.bind(this, id)}\r\n          title=\"Remove parcel\"\r\n          className=\"parcel__remove\"\r\n        >\r\n          &#215;\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ParcelListItem from \"./ParcelListItem\";\r\nexport default class ParcelList extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"parcels\">\r\n        <ul className=\"parcels__list\">\r\n          {this.props.parcels.map(item => (\r\n            <ParcelListItem\r\n              parcel={item}\r\n              key={item}\r\n              getParcelStatus={this.props.getParcelStatus}\r\n              removeParcel={this.props.removeParcel}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Results extends Component {\r\n  render() {\r\n    const {\r\n      number,\r\n      citySender,\r\n      cityRecipient,\r\n      payer,\r\n      status\r\n    } = this.props.parcelStatus;\r\n    return (\r\n      <div className=\"results\">\r\n        {this.props.parcelStatus && (\r\n          <div>\r\n            <h2>{number}</h2>\r\n            <div>\r\n              {citySender}-{cityRecipient}\r\n            </div>\r\n            <p>Payer: {payer}</p>\r\n            <p>Status: {status}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport SearchForm from \"./components/SearchForm\";\r\nimport ParcelList from \"./components/ParcelList\";\r\nimport Results from \"./components/Results\";\r\n// const Aftership = require('aftership')('c3f426dd-9ded-4095-9180-69e8301f4d27');\r\nclass App extends Component {\r\n  state = {\r\n    parcels: [\"20450182437180\", \"20450123167687\"],\r\n    responseText: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    localStorage.getItem(\"parcelList\")\r\n      ? this.setState(JSON.parse(localStorage.getItem(\"parcelList\")))\r\n      : this.setState({\r\n          // parcels: [20450182437180, 20450123167687],\r\n          responseText: \"\"\r\n        });\r\n    this.setState({ responseText: \"\" });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem(\"parcelList\", JSON.stringify(this.state));\r\n  }\r\n\r\n  getData = query => {\r\n    return axios.post(\"https://api.novaposhta.ua/v2.0/json/\", {\r\n      apiKey: \"\",\r\n      modelName: \"TrackingDocument\",\r\n      calledMethod: \"getStatusDocuments\",\r\n      methodProperties: {\r\n        Documents: [\r\n          {\r\n            DocumentNumber: query,\r\n            Phone: \"\"\r\n          }\r\n        ]\r\n      }\r\n    });\r\n  };\r\n  formatResponse = response => {\r\n    const data = response.data.data[0];\r\n    return {\r\n      number: data.Number,\r\n      citySender: data.CitySender,\r\n      cityRecipient: data.CityRecipient,\r\n      payer: data.PayerType,\r\n      status: data.Status\r\n    };\r\n  };\r\n\r\n  searchParcel = query => {\r\n    if (this.state.parcels.includes(query)) {\r\n      alert(\"Parcel already added!\");\r\n      return;\r\n    }\r\n    this.getData(query)\r\n      .then(response => {\r\n        this.setState({\r\n          parcels: [...this.state.parcels, query],\r\n          responseText: this.formatResponse(response)\r\n        });\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  removeParcel = id => {\r\n    this.setState({\r\n      parcels: [...this.state.parcels.filter(item => item !== id)]\r\n    });\r\n  };\r\n\r\n  getParcelStatus = number => {\r\n    this.getData(number)\r\n      .then(response => {\r\n        this.setState({\r\n          responseText: this.formatResponse(response)\r\n        });\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <main>\r\n          <SearchForm submitForm={this.searchParcel} />\r\n          <ParcelList\r\n            getParcelStatus={this.getParcelStatus}\r\n            removeParcel={this.removeParcel}\r\n            parcels={this.state.parcels}\r\n          />\r\n          <Results parcelStatus={this.state.responseText} />\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}